import com.rameses.annotations.*;
import com.rameses.functions.*;
import java.text.*;

class WaterworksBatchBillingService {
	
	@Service("WorkflowTaskService")
	def taskSvc;

	@Service("DateService")
	def dateSvc;

	@Service("WaterworksBillService")
	def billSvc;


	@DataContext('waterworks_batch_billing')
	def batchEm; 

	@DataContext('waterworks_account')
	def acctEm; 

	@DataContext('waterworks_bill')
	def billEm; 

	@ProxyMethod
	public def create( def o ) {
		def yrmon = "" + o.period.year + String.format("%02d", o.period.month);
		o.objid = "WB" + yrmon +"-"+ o.subarea.code;  
		o.state = 'DRAFT';		
		o = batchEm.create( o ); 

		def p = [:];
		p.processname = 'waterworks_batch_billing';
		p.refid = o.objid;
		p.startdate = dateSvc.serverDate;
		taskSvc.start(p);
		return o;
	}

	@ProxyMethod
	public def getAccountsForBilling( def o ) {
		def e = o.excludeinbatch;
		if(!e) e = 0;
		def p = [batchid: o.objid, start: o._start, limit: o._limit, excludeinbatch: e ];
		
		if(o.showerronly == true ) {
			p.filter = "NOT(errmsg = 'OK')";
		}
		else {
			p.filter =  "1=1";
		}
		return batchEm.getAccountsForBilling( p );
	}

	@ProxyMethod
	public def excludeAccountsInBatch( def o ) {
		if(!o) throw new Exception("Please specify items in excludeAccountsInBatch");
		o.each {
			acctEm.find( [objid: it ]).update( [excludeinbatch: 1] );
		}
	}	

	@ProxyMethod
	public def includeAccountsInBatch( def o ) {
		if(!o) throw new Exception("Please specify items in includeAccountsInBatch");
		o.each {
			acctEm.find( [objid: it ]).update( [excludeinbatch: 0] );
		}
	}	

	@ProxyMethod
	public def getProcessInfo( def o ) {
		def info = [batchid:o.objid, counter: 0, status: 0];
		if(o.taskstate == 'for-reading') {
			info.action = "create-bills";
			info.totalcount = batchEm.findForBillingCount( [ batchid:o.objid,errstate:0] )?.count;
		}
		else if(o.taskstate == 'for-approval') {
			info.action = "update-bills";
			info.totalcount = billEm.find([batchid: o.objid]).where("billed=0").select("c:{COUNT(*)}").val();
		}
		else if(o.taskstate == 'approved') {
			info.action = "approve-bills";
			info.totalcount = billEm.find([batchid: o.objid]).where("state='OPEN' AND billed=1").select("c:{COUNT(*)}").val();
		}		
		else {
			info = null;
		}
		return info;
	}

	@ProxyMethod
	public def processBatch( def o ) {
		int batch_process_size = 50;
		def items = null;
		if(o.action=="create-bills") {
			def p = [:];
			p.batchid = o.batchid;
			p.filter =  " errmsg = 'OK' ";
			p.start = 0;
			p.excludeinbatch = 0;
			p.limit = batch_process_size;
			items = batchEm.getAccountsForBilling( p );
			items?.each {
				o.counter = o.counter + 1;
				def vv = [acctid: it.objid, year:it.year,month:it.month, batchid: o.batchid];
				b.billno = o.batchid + "-" + String.format("%05d", o.counter);
				vv.txnmode = "ONLINE";
				billSvc.createBill( vv );
			}
		}
		else if( o.action == "update-bills") {
			items = billEm.find([batchid: o.batchid]).where("billed=0").select("objid").limit(batch_process_size).list();
			items?.each{ 
				o.counter = o.counter + 1;			
				billSvc.updateBillFees( [objid: it.objid] );
				billEm.find( [objid: it.objid]).update( [billed:1]);
			}
		}
		else if( o.action == "approve-bills") {
			items = billEm.find([batchid: o.batchid]).where(" state='OPEN' AND billed=1 ").select("objid").limit(batch_process_size).list();
			items.each{ 
				o.counter = o.counter + 1;
				billSvc.approve( [objid: it.objid] ); 
			}
		}

		//items size
		if( items==null && items.size == 0 ) {
			o.status = 1;
		}

		return o;		
	}



} 