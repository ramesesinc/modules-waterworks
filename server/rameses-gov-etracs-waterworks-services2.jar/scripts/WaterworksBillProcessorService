import com.rameses.annotations.*;
import com.rameses.functions.*;
import java.rmi.server.UID;
import com.rameses.util.*;
import treasury.utils.*;
import treasury.facts.*;
import waterworks.facts.*;
import com.rameses.annotations.*;
import com.rameses.util.*;


/****************************************************************************************
* This is for individual bills
*****************************************************************************************/

class WaterworksBillProcessorService {
	
	@DataContext('waterworks_billing')
	def billEm; 

	@DataContext('vw_waterworks_consumption')
	def vwConsumptionEm; 

	@DataContext('waterworks_account')
	def acctEm;

	@ProxyMethod
	public int getErrCode(def v ) {
		def o = vwConsumptionEm.find([objid: v.consumptionid]).first();
		int errcode = 0;
		if( o.acctstate == "DRAFT" ) {
			errcode += 2;   //Account must not be in DRAFT mode;
		} 			
		if( o.meterid!=null && o.prevreading == null ){
			errcode += 4;   //There must be a previous month entry;
		};
		return errcode;
	}

	@ProxyMethod
	public def createBill( def o ) {
		if( !o.batchid ) throw new Exception("batchid is required");
		if( !o.consumptionid ) throw new Exception("consumptionid is required");
		if( !o.acctid ) throw new Exception("acctid is required");
		if( !o.counter ) throw new Exception("counter is required");

		int errcode = getErrCode( o );
		def wb = [:];
		wb.state = (errcode > 0) ? "ERR" : "UNBILLED";
		wb.batchid = o.batchid;
		wb.acctid = o.acctid;
		wb.consumptionid = o.consumptionid;			
		wb.billno = o.batchid + "-" + String.format("%04d", o.counter);
		wb.objid = wb.billno;
		wb.discount = 0;
		wb.surcharge = 0;
		wb.interest = 0;
		wb.otherfees = 0;
		wb.credits = 0;
		wb.arrears = 0;
		wb.averageconsumption = 0;
		wb.unpaidmonths = 0;
		wb.billed = 0;
		wb.printed = 0;
		wb.errcode = errcode;
		billEm.create( wb );
		return wb;
	}

	@ProxyMethod
	public def fixErrors(def o) {
		int errcode = getErrCode( o );
		def u = [:];
		u.errcode = errcode;
		if(errcode==0) u.state = "UNBILLED";
		billEm.find( [objid: o.objid] ).update( u );
		return u;
	}


	
} 