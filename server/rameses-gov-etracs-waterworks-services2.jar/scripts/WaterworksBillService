import com.rameses.annotations.*;

class WaterworksBillService {


    @Service('DateService')
	def dateSvc;

	@Service("WaterworksBillingRuleService")
	def ruleSvc;

	@DataContext("vw_waterworks_account")
	def vwAcctEm;

	@DataContext("vw_waterworks_bill")
	def vwBillEm;

	@DataContext("waterworks_bill")
	def billEm;

	@DataContext("waterworks_account")
	def acctEm;

	@DataContext("waterworks_billitem")
	def billItemEm;

	@DataContext("waterworks_payment")
	def pmtEm;

	@DataContext("waterworks_payment_item")
	def pmtItemEm; 


	@DataContext("waterworks_credit")
	def creditEm;

	@DataContext("waterworks_recurringfee")
	def recurFeeEm;

	@DataContext("waterworks_consumption")
	def consumptionEm;


	//This initializes the new bill after creation and returns
	@ProxyMethod
	public def initNewBill( def o ) {
		if(!o.bill ) throw new Exception("bill is required in WaterworksBillService.initNewBill");
		def bill = o.bill;

		//get previous balance of bill and update current bill.
		updateBalanceForward( [bill:bill] );

		//we only pass the objid bec. the succeeding functions must force reload of the bill info		
		updateBillFees( [objid: bill.objid] );
		updateBillTotals( [objid: bill.objid] );

		//update consumption. find previous consumption
		def acct = vwAcctEm.find( [objid: bill.acctid] ).first();
		def ym = (bill.period.year*12)+bill.period.month-1;
		def prev = consumptionEm.find( [acctid: acct.objid, meterid: acct.meterid ] ).where("((year*12)+month) = :ym", [ym: ym] ).first();
		if(!prev) {
			throw new Exception("Previous reading not found");
		}
		def c = [:];
		c.acctid = bill.acctid;
		c.billid = bill.objid;
		c.year = bill.period.year;
		c.month = bill.period.month;
		c.reading = prev.reading;
		c.meterid = acct.meterid;
		c.volume = 0;
		c.amount = 0;
		c.hold = prev.hold;
		c.txnmode = "ONLINE";
		c = consumptionEm.create( c );
		billEm.find( [objid: bill.objid]).update([consumptionid: c.objid]);

		//we need to close the old bill so it will not be used anymore
		if(acct.billid) {
			billEm.find( [objid: acct.billid ]).update([state:"CLOSED"]);
		}
	}

	//create and cancel bill
	@ProxyMethod
	public def cancelBill(def o) {
		if(!o.objid) throw new Exception("objid required in WaterworksBillService.cancelBill");
		def bill = billEm.find([objid: o.objid]).first();
		if(bill.initial!=1) throw new Exception("Only the initial bill can be cancelled");

		//update first account and delete also credit payment if any.
		acctEm.find([billid: o.objid]).update([billid:"{NULL}"]);
		billEm.find( [objid: o.objid] ).update( [consumptionid: "{NULL}"]);
		consumptionEm.find( [billid: o.objid]).delete();
		billEm.find( [objid: o.objid]).delete();				
	}

	//this adds a negative beginning balance
	@ProxyMethod
	public def addBeginCredit(def pmt ) {
		pmt.txnmode = "CAPTURE";
		pmt.voided = 0;
		pmt.discount = 0;
        pmt.reftype = "beginbalance";
		pmt = pmtEm.create( pmt );

		//add credit entry
		def m = [:];
		m.acctid = pmt.acctid;
		m.paymentref = [objid: pmt.objid ];
		m.dr = pmt.amount;
		m.cr = 0;
		creditEm.create( m );
		billItemEm.updateInitialBillBalanceForward([acctid: pmt.acctid ]);
		updateBillTotals([objid: pmt.billid ]); 
	}

	@ProxyMethod
	public def removeBeginCredit( def o ) {
		def pmt = pmtEm.find( [billid: o.billid, reftype: 'beginbalance'] ).first(); 
		o.objid = pmt.objid;
		creditEm.find([paymentrefid: pmt.objid]).delete();
		pmtEm.find([objid: pmt.objid]).delete();
		billItemEm.updateInitialBillBalanceForward([acctid: pmt.acctid ]);
		updateBillTotals([objid: pmt.billid ]); 		
	}


	//this is for adding single items to the bill. This is used only during initial bill
	@ProxyMethod
	public def addBillItem( def o ) {
		billItemEm.create( o );
		//check if this billitem is part of this bill. If not update initial balance forward. Update the totals also
		billItemEm.updateInitialBillBalanceForward([acctid: o.acctid]);
		updateBillTotals([objid: o.billid ]); 
	}

	@ProxyMethod
	public def updateBillItem( def o ) {
		billItemEm.update( o );
		billItemEm.updateInitialBillBalanceForward([acctid: o.acctid]);
		updateBillTotals([objid: o.billid ]); 		
	}

	@ProxyMethod
	public def removeBillItem( def o ) {
		def billItem = billItemEm.find( [objid: o.objid] ).first(); 
		if( billItem.billed > 0  ) 
			throw new Exception( "This entry cannot be removed. It is already billed");

		def b = pmtItemEm.find([refid: o.objid]).exists();
		if( b == true ) {
			throw new Exception("Cannot delete item because it already has payment reference");
		}

		billItemEm.find( [objid: billItem.objid] ).delete();
		if(billItem.recurid !=null) {
			recurFeeEm.updateAmtBilledByBillItem( [billitemid: billItem.objid, recurringfeeid: billItem.recurid ] );		
		}

		billItemEm.updateInitialBillBalanceForward([acctid: billItem.acctid]);
		updateBillTotals( [objid: billItem.billid] );
	}


	@ProxyMethod
	public def addConsumptionBill(def o) {
		if(! o.objid ) throw new Exception("objid of bill is required in WaterworksBillService.addConsumptionBill");

		def bill = vwBillEm.find( [objid: o.objid] ).first();
		if( !bill.consumptionid ) throw new Exception("There is no consumption for this bill");		

		def cons = consumptionEm.find( [objid: bill.consumptionid ] ).first(); 
		if(cons.hold == 1) throw new Exception("This consumption is on hold. Please check consumption entry");
		if(!cons.amount) throw new Exception("There is no amount computed yet for this consumption. Run calculate first in consumption");

		def m = [:];
		m.acctid = bill.acctid;
		m.billid = bill.objid;
		m.item = [objid: "WATER_FEE"];
		m.amount = cons.amount;
		m.amtpaid = 0;
		m.discount = 0;
		m.year = bill.period.year;
		m.month = bill.period.month;
		m.txndate = bill.period.billdate;	
		m.system = 1;
		m.billed = 0;
		billItemEm.create( m );
		updateBillTotals( [bill: bill ]);
	}

	//utilities for this bill. updateBalanceForward should only be called once, before payments or credits are applied.
	@ProxyMethod
	public def updateBalanceForward(  def b ) {
		if(!b.bill && !b.objid ) throw new Exception("objid or bill is required in WaterworksBillService.updateBalanceForward");
		def bill = b.bill;
		if(!bill) {
			bill = vwBillEm.find( [objid: b.objid ]).first();
		}
		def p = [ ym: (bill.period.year*12)+bill.period.month ];
		//calculate balance forward
		def wh =  "((year*12)+month) < :ym AND ((amount-amtpaid)>0)"
		def totaldue = billItemEm.find( [acctid: bill.acctid ] ).select("c:{SUM(amount-amtpaid)}").where(wh, p).val();
		if(!totaldue) totaldue = 0;

		//calculate also if there are credits 
		def credits = creditEm.find([acctid: bill.acctid]).select("c:{SUM(dr-cr)}").val(); 
		if(!credits ) credits = 0;

		//if both totaldue and credits are greater then zero automatically apply credits
		if( totaldue > 0 && credits > 0 ) {
			throw new Exception("Please apply the credits first before proceeding");	
		}
		def tot = totaldue - credits;

		billEm.find([objid: bill.objid]).update([balanceforward: tot]);
		return tot;		
	}

	//support function for updateBillFees and updatePenaltyFees
	void saveBillItem( bill, itm, txndate ) {
		def m = [:];
		m.acctid = bill.acctid;
		m.billid = bill.objid;
		m.item = [objid: itm.billcode];
		m.amount = itm.amount;
		m.amtpaid = 0;
		m.discount = 0;
		m.year = itm.year;
		m.month = itm.month;
		m.txndate = txndate;	
		m.system = 0;
		m.billed = 0;
		m.particulars = itm.remarks;
		if(itm.recurringfeeid ) m.recurringfeeid = itm.recurringfeeid;
		billItemEm.create( m );
	}

	@ProxyMethod
	public void updateBillFees( def o ) {
		if(!o.bill && !o.objid ) throw new Exception("objid or bill is required in WaterworksBillService.updateBillFees");
		def bill = o.bill;
		if(!bill) {
			bill = vwBillEm.find( [objid: o.objid] ).first();
		}
		def acct = o.account;
		if(!acct) {
			acct = vwAcctEm.find( [objid: bill.acctid ]).first();
		}
		def pp = [:];
		pp.account = acct;
		pp.bill = bill;

		//ensure that penalties are not run by setting the date before penalty date. arbitrarily set at period's todate		
		pp.txndate = bill.period.todate; 
		def res = ruleSvc.getBillItems( pp );

		//check if there are bills calculated
		def newItems = res.billitems.findAll{ it.objid == null };
		//add new items if there are any and update the bill
		if( newItems ) {
			newItems.each {
				saveBillItem( bill, it, pp.txndate );
			}
			//also update amount billed for all waterworks_recurring. 
			//We will include billid so it will not update other recurring fees not included in bill
			recurFeeEm.updateAmtBilled( [acctid: bill.acctid, billid: bill.objid ] );
			updateBillTotals( [bill: bill ]);
		}
	}

	@ProxyMethod
	public void updatePenaltyFees( def o ) {
		if(!o.bill && !o.objid ) throw new Exception("objid or bill is required in WaterworksBillService.updateBillFees");
		def bill = o.bill;
		if(!bill) {
			bill = vwBillEm.find( [objid: o.objid] ).first();
		}
		def acct = o.account;
		if(!acct) {
			acct = vwAcctEm.find( [objid: bill.acctid ]).first();
		}
		if(!bill.period.duedate) throw new Exception("Due date is not set");

		def pp = [:];
		pp.account = acct;
		pp.bill = bill;

		//if date specfied, use that else use the period due date
		pp.txndate = o.txndate;
		if(!pp.txndate) pp.txndate = bill.period.duedate;

		def res = ruleSvc.getBillItems( pp );
		//check if there are surcharge bills calculated
		def newItems = res.billitems.findAll{ it.objid == null };
		if( newItems ) {
			newItems.each {
				saveBillItem( bill, it, pp.txndate );	
			}
			updateBillTotals( [bill: bill ]);
		}		
	}	

	@ProxyMethod
	public def updateBillTotals( def o ) {
		if(!o.bill && !o.objid ) throw new Exception("objid or bill is required in WaterworksBillService.updateBillTotals");

		def bill = o.bill;
		if( !bill ) {
			bill =  vwBillEm.find( [objid: o.objid] ).first();
		}
		int ym = (bill.period.year*12)+bill.period.month;

		def v = [:];
		v.totalcredits = creditEm.find([acctid: bill.acctid]).select("c:{SUM(dr-cr)}").val();
		if(v.totalcredits == null ) v.totalcredits = 0;

		//total unpaid for previous do not include 
		v.totalprevunpaid = billItemEm.find([acctid: bill.acctid]).select("c:{SUM(amount-amtpaid)}").where("(year*12)+month < :ym", [ym:ym, billid: bill.objid]).val(); 
		if(v.totalprevunpaid == null) v.totalprevunpaid = 0;

		//total unpaid amount for this bill
		v.totalbillunpaid = billItemEm.find([billid: bill.objid]).select("c:{SUM(amount-amtpaid)}").where("(year*12)+month = :ym", [ym: ym]).val(); 
		if(v.totalbillunpaid == null) v.totalbillunpaid = 0;

		v.totalunpaid = v.totalprevunpaid + v.totalbillunpaid;

		//calculate also the total amt of sales and charges for this bill
		v.balanceforward = bill.balanceforward;

		v.billamount = billItemEm.find([billid: bill.objid]).select("c:{SUM(amount)}").where(" ((year*12)+month) = :ym  AND (item.itemtype IS NULL OR  item.itemtype NOT IN ('SURCHARGE')) ", [ym:ym]).val();
		if( v.billamount == null ) v.billamount = 0;

		v.totalsurcharge = billItemEm.find([billid: bill.objid]).select("c:{SUM(amount)}").where("((year*12)+month) = :ym AND item.itemtype IN ('SURCHARGE')", [ym:ym]).val();
		if( v.totalsurcharge == null ) v.totalsurcharge = 0;

		//get total payments
		v.totalpayment = pmtEm.find([billid: bill.objid ]).where("reftype = 'cashreceipt' AND voided=0").select("c:{SUM(amount)}").val();
		if(v.totalpayment == null) v.totalpayment = 0;

		v.totaldiscount = pmtEm.find([billid: bill.objid ]).select("c:{SUM(discount)}").where("voided = 0").val();
		if( v.totaldiscount == null ) v.totaldiscount = 0;
		v.totaldiscount = Math.abs( v.totaldiscount );

		v.totalamtdue = v.balanceforward + v.billamount + v.totalsurcharge - v.totalpayment - v.totaldiscount;

		billEm.find( [objid: bill.objid ]).update( v );

		return v;
	}

	@ProxyMethod
	public def getBillTotals( def o ) {
		if(!o.objid ) throw new Exception("objid of bill is required in WaterworksBillService.getBillTotals");
		def flds = "balanceforward,totalcredits,totalprevunpaid,totalbillunpaid,billamount,totalsurcharge,totalpayment,totaldiscount,totalunpaid,totalamtdue";
		return vwBillEm.find( [objid: o.objid] ).select(flds).first();
	}

	@ProxyMethod
	public void approve(def o) {
		def bill = vwBillEm.find( [objid: o.objid] ).first(); 
		if(bill.billamount<=0) 
			throw new Exception("Bill amount must be greater than zero");
		if(bill.totalunpaid>0 && bill.totalcredits>0) 
			throw new Exception("All credits must be applied first");

		billEm.find( [objid: bill.objid ]).update( [state: "POSTED"] );
		if(bill.initial == 1) {
			acctEm.find( [objid: bill.acctid ]).update( [state:"ACTIVE"] ); 
		}
	}


}