import com.rameses.annotations.*;

class WaterworksBillService {


    @Service('DateService')
	def dateSvc;

	@Service("WaterworksBillingRuleService")
	def ruleSvc;

	@DataContext("vw_waterworks_account")
	def vwAcctEm;

	@DataContext("vw_waterworks_bill")
	def vwBillEm;

	@DataContext("waterworks_bill")
	def billEm;

	@DataContext("waterworks_account")
	def acctEm;

	@DataContext("waterworks_billitem")
	def billItemEm;

	@DataContext("waterworks_payment")
	def pmtEm;

	@DataContext("waterworks_payment_item")
	def pmtItemEm; 


	@DataContext("waterworks_credit")
	def creditEm;

	@DataContext("waterworks_recurringfee")
	def recurFeeEm;

	@DataContext("waterworks_consumption")
	def consumptionEm;

	def getNextValidityDate(def period, def txndate ) {
		if(!txndate) txndate = dateSvc.getBasicServerDate();
		if( txndate.before( period.billdate ) ) {
			return period.billdate;	
		}
		else if( period.discdate && txndate.before(period.discdate )) {
			return period.discdate;		
		}
		else if( period.duedate && txndate.before(period.duedate)) {
			return period.duedate;
		}
		else {
			return period.billexpirydate;
		}
	}

	//utilities for this bill. updateBalanceForward should only be called once, before payments or credits are applied.
	@ProxyMethod
	public def updateBalanceForward(  def b ) {
		if(! b.objid ) throw new Exception("objid of bill is required in WaterworksBillService.updateBalanceForward");		
		def bill = vwBillEm.find( [objid: b.objid ]).first();		
		def p = [ ym: (bill.period.year*12)+bill.period.month ];
		//calculate balance forward
		def wh =  "((year*12)+month) < :ym AND ((amount-amtpaid)>0)"
		def tot = billItemEm.find( [acctid: bill.acctid ] ).select("c:{SUM(amount-amtpaid)}").where(wh, p).val();
		if(!tot) tot = 0;
		billEm.find([objid: bill.objid]).update([balanceforward: tot]);
		return tot;		
	}

	//this is for adding single items to the bill. This is used only during initial bill
	@ProxyMethod
	public def addBillItem( def o ) {
		billItemEm.create( o );
		//check if this billitem is part of this bill. If not update initial balance forward. Update the totals also
		billItemEm.updateInitialBillBalanceForward([acctid: o.acctid]);
		updateBillTotals([objid: o.billid ]); 
	}

	@ProxyMethod
	public def updateBillItem( def o ) {
		billItemEm.update( o );
		billItemEm.updateInitialBillBalanceForward([acctid: o.acctid]);
		updateBillTotals([objid: o.billid ]); 		
	}

	@ProxyMethod
	public def removeBillItem( def o ) {
		def billItem = billItemEm.find( [objid: o.objid] ).first(); 
		if( billItem.billed > 0  ) 
			throw new Exception( "This entry cannot be removed. It is already billed");

		def b = pmtItemEm.find([refid: o.objid]).exists();
		if( b == true ) {
			throw new Exception("Cannot delete item because it already has payment reference");
		}

		billItemEm.find( [objid: billItem.objid] ).delete();
		if(billItem.recurid !=null) {
			recurFeeEm.updateAmtBilledByBillItem( [billitemid: billItem.objid, recurringfeeid: billItem.recurid ] );		
		}

		billItemEm.updateInitialBillBalanceForward([acctid: billItem.acctid]);
		updateBillTotals( [objid: billItem.billid] );
	}


	@ProxyMethod
	public def addConsumptionBill(def o) {
		if(! o.objid ) throw new Exception("objid of bill is required in WaterworksBillService.addConsumptionBill");

		def bill = vwBillEm.find( [objid: o.objid] ).first();
		if( !bill.consumptionid ) throw new Exception("There is no consumption for this bill");		

		def cons = consumptionEm.find( [objid: bill.consumptionid ] ).first(); 
		if(cons.hold == 1) throw new Exception("This consumption is on hold. Please check consumption first");
		if(!cons.amount) throw new Exception("There is no amount computed yet for this consumption. Run calculate first in consumption");

		def m = [:];
		m.acctid = bill.acctid;
		m.billid = bill.objid;
		m.item = [objid: "WATER_FEE"];
		m.amount = cons.amount;
		m.amtpaid = 0;
		m.discount = 0;
		m.year = bill.period.year;
		m.month = bill.period.month;
		m.txndate = bill.period.billdate;	
		m.system = 1;
		m.billed = 0;
		billItemEm.create( m );
		updateBillTotals( [bill: bill ]);
	}

	@ProxyMethod
	public void updateBillFees( def o ) {
		if(!o.objid ) throw new Exception("objid or bill is required in WaterworksBillService.updateBillFees");
		def bill = vwBillEm.find( [objid: o.objid] ).first();

		def pp = [:];
		pp.account = vwAcctEm.find( [objid: bill.acctid ]).first();
		pp.bill = bill;
		pp.txndate = o.txndate;

		def res = ruleSvc.getBillItems( pp );
		//add item
		res.billitems.findAll{ it.objid == null }.each {
			def m = [:];
			m.acctid = bill.acctid;
			m.billid = bill.objid;
			m.item = [objid: it.billcode];
			m.amount = it.amount;
			m.amtpaid = 0;
			m.discount = 0;
			m.year = it.year;
			m.month = it.month;
			m.txndate = bill.period.billdate;	
			m.system = 0;
			m.billed = 0;
			m.particulars = it.remarks;
			m.recurringfeeid = it.recurringfeeid;
			billItemEm.create( m );
		}

		//also update amount billed for all waterworks_recurring. We will include billid so it will not update other recurring fees not included in bill
		recurFeeEm.updateAmtBilled( [acctid: bill.acctid, billid: bill.objid ] );
		updateBillTotals( [bill: bill ]);
	}

	

	@ProxyMethod
	public def updateBillTotals( def o ) {
		if(!o.bill && !o.objid ) throw new Exception("objid or bill is required in WaterworksBillService.updateBillTotals");

		def bill = o.bill;
		if( !bill ) {
			bill =  vwBillEm.find( [objid: o.objid] ).first();
		}
		int ym = (bill.period.year*12)+bill.period.month;

		def v = [:];
		v.totalcredits = creditEm.find([acctid: bill.acctid]).select("c:{SUM(dr-cr)}").val();
		if(v.totalcredits == null ) v.totalcredits = 0;

		//total unpaid for previous do not include 
		v.totalprevunpaid = billItemEm.find([acctid: bill.acctid]).select("c:{SUM(amount-amtpaid)}").where("(year*12)+month < :ym", [ym:ym, billid: bill.objid]).val(); 
		if(v.totalprevunpaid == null) v.totalprevunpaid = 0;

		//total unpaid amount for this bill
		v.totalbillunpaid = billItemEm.find([billid: bill.objid]).select("c:{SUM(amount-amtpaid)}").where("(year*12)+month = :ym", [ym: ym]).val(); 
		if(v.totalbillunpaid == null) v.totalbillunpaid = 0;

		v.totalunpaid = v.totalprevunpaid + v.totalbillunpaid;

		//calculate also the total amt of sales and charges for this bill
		v.balanceforward = bill.balanceforward;

		v.billamount = billItemEm.find([billid: bill.objid]).select("c:{SUM(amount)}").where(" ((year*12)+month) = :ym  AND (item.itemtype IS NULL OR  item.itemtype NOT IN ('SURCHARGE')) ", [ym:ym]).val();
		if( v.billamount == null ) v.billamount = 0;

		v.totalsurcharge = billItemEm.find([billid: bill.objid]).select("c:{SUM(amount)}").where("((year*12)+month) = :ym AND item.itemtype IN ('SURCHARGE')", [ym:ym]).val();
		if( v.totalsurcharge == null ) v.totalsurcharge = 0;

		//get total payments
		v.totalpayment = pmtEm.find([billid: bill.objid ]).where("reftype = 'cashreceipt' AND voided=0").select("c:{SUM(amount)}").val();
		if(v.totalpayment == null) v.totalpayment = 0;

		v.totaldiscount = pmtEm.find([billid: bill.objid ]).select("c:{SUM(discount)}").where("voided = 0").val();
		if( v.totaldiscount == null ) v.totaldiscount = 0;
		v.totaldiscount = Math.abs( v.totaldiscount );

		v.totalamtdue = v.balanceforward + v.billamount + v.totalsurcharge - v.totalpayment - v.totaldiscount;

		billEm.find( [objid: bill.objid ]).update( v );

		return v;
	}

	@ProxyMethod
	public def getBillTotals( def o ) {
		if(!o.objid ) throw new Exception("objid of bill is required in WaterworksBillService.getBillTotals");
		def flds = "balanceforward,totalcredits,totalprevunpaid,totalbillunpaid,billamount,totalsurcharge,totalpayment,totaldiscount,totalunpaid,totalamtdue";
		return vwBillEm.find( [objid: o.objid] ).select(flds).first();
	}

	@ProxyMethod
	public void approve(def o) {
		def bill = vwBillEm.find( [objid: o.objid] ).first(); 
		def t = getBillTotals([bill:bill]);
		if(t.billamount<=0) 
			throw new Exception("Bill amount must be greater than zero");
		if(t.unpaid>0 && t.totalcredits>0) 
			throw new Exception("All credits must be applied first");

		billEm.find( [objid: bill.objid ]).update( [state: "POSTED"] );
		if(bill.initial == 1) {
			acctEm.find( [objid: bill.acctid ]).update( [state:"ACTIVE"] ); 
		}
	}





}