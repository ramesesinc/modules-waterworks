import com.rameses.annotations.*;

class WaterworksBillService {

	@Service("ControlnoGeneratorService")
    def controlNoSvc;

    @Service('Var')
	def var;

	@Service("WaterworksScheduleService")
	def skedSvc;

    @Service('DateService')
	def dateSvc;

	@Service("WaterworksBillingRuleService")
	def ruleSvc;

	@Service("WaterworksPaymentService")
	def pmtSvc;

	@DataContext("vw_waterworks_account")
	def vwAcctEm;

	@DataContext("vw_waterworks_bill")
	def vwBillEm;

	@DataContext("waterworks_bill")
	def billEm;

	@DataContext("waterworks_account")
	def acctEm;

	@DataContext("waterworks_billitem")
	def billItemEm;

	@DataContext("waterworks_payment")
	def pmtEm;

	@DataContext("waterworks_credit")
	def creditEm;

	def getNextValidityDate(def period, def txndate ) {
		if(!txndate) txndate = dateSvc.getBasicServerDate();
		if( txndate.before( period.billdate ) ) {
			return period.billdate;	
		}
		else if( period.discdate && txndate.before(period.discdate )) {
			return period.discdate;		
		}
		else if( period.duedate && txndate.before(period.duedate)) {
			return period.duedate;
		}
		else {
			return period.billexpirydate;
		}
	}

	//utilities for this bill
	@ProxyMethod
	public def updateBalanceForward(  def b ) {
		if(! b.objid ) throw new Exception("objid of bill is required in WaterworksBillService.supdateBalanceForward");		
		def bill = vwBillEm.find( [objid: b.objid ]).first();		
		def p = [ ym: (bill.period.year*12)+bill.period.month ];
		//calculate balance forward
		def wh =  "((year*12)+month) < :ym AND ((amount-amtpaid-discount)>0)"
		def tot = billItemEm.find( [acctid: bill.acctid ] ).select("c:{SUM(amount-amtpaid-discount)}").where(wh, p).val();
		if(!tot) tot = 0;
		billEm.find([objid: bill.objid]).update([balanceforward: tot]);
		return tot;		
	}

	@ProxyMethod
	public def getBillDetails( def o ) {
		if(! o.objid ) throw new Exception("objid of bill is required in WaterworksBillService.getBillDetails");		
		def bill = vwBillEm.find( [objid: o.objid] ).first();

		def details = [];
		def bal = [ particulars: "Balance Forward" ];
		if( bill.balanceforward < 0 ) {
			bal.dr = 0;
			bal.cr = Math.abs( bill.balanceforward );
		}
		else {
			bal.dr =bill.balanceforward;			
			bal.cr = 0;			
		};
		bal.txndate = bill.period.todate;
		bal.group = "Previous";
		details <<  bal;

		//include billitems 
		def billItems = billItemEm.find( [billid: bill.objid, year: bill.period.year, month: bill.period.month ] ).orderBy("item.sortorder ASC").list();
		billItems.each {
			def m = [:];
			m.particulars = it.item.title;
			if( it.particulars  ) m.particulars += "("+it.particulars+")";
			m.txndate = it.txndate;
			if(!m.txndate) m.txndate = bill.period.billdate;
			m.dr = it.amount;
			m.cr = 0;
			m.group = "Current";
			details << m;
		}

		//do not include non cash receipt payments
		def pmtItems = pmtEm.find( [billid: bill.objid ] ).where("voided = 0 ").list();
		pmtItems.each {
			if(it.reftype == "cashreceipt") {
				def m = [:];
				m.txndate = it.refdate;
				m.particulars = "Payment Ref No" + it.refno;
				m.dr = 0;
				m.cr = it.amount;
				m.group = "Current";
				details << m;			
			}
			if( it.discount > 0 ) {
				def m = [:];
				m.txndate = it.refdate;
				m.particulars = "Discount " + it.refno;
				m.dr = 0;
				m.cr = it.discount;
				m.group = "Current";
				details << m;
			}
		}

		details = details.sort{ it.txndate };
		def runbal = 0;
		details.each {
			runbal = runbal + it.dr - it.cr;
			it.runbalance = runbal; 
			it.amount = it.dr - it.cr;
		}

		def b = [:];
		b.details = details;
		b.totalamount = details.sum{ it.amount };
		return b;
	}

	@ProxyMethod
	public void updateOtherFees( def o ) {
		if(! o.objid ) throw new Exception("objid of bill is required in WaterworksBillService.updateOtherFees");
		def bill = vwBillEm.find( [objid: o.objid] ).first();

		def pp = [:];
		pp.account = vwAcctEm.find( [objid: bill.acctid ]).first();
		pp.bill = bill;

		def res = ruleSvc.getBillItems( pp );
		//add item
		res.billitems.findAll{ it.objid == null }.each {
			def m = [:];
			m.acctid = bill.acctid;
			m.billid = bill.objid;
			m.item = [objid: it.billcode];
			m.amount = it.amount;
			m.amtpaid = 0;
			m.discount = 0;
			m.year = bill.period.year;
			m.month = bill.period.month;
			m.txndate = bill.period.billdate;	
			m.system = 0;
			m.billed = 0;
			m.particulars = it.remarks;
			if(it.parentrefid == null ) {
				m.parentrefid = bill.objid;
			};
			billItemEm.create( m );
		}
	}


}