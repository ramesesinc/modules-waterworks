import com.rameses.annotations.*;

class WaterworksCashReceiptService {

    @Service('WaterworksPaymentService') 
    def pmtSvc; 

    @Service("NumberService")
    def numSvc;

    @Service("DateService")
    def dateSvc;

    @DataContext("vw_waterworks_bill")
    def vwBillEm;

    @DataContext("waterworks_account")
    def acctEm;

    def findBill( def o ) {
        def bill = vwBillEm.find( [billno: o.id ] ).first();
        def acct = null;
        if(!bill) {
            acct = acctEm.find( [acctno: o.id ] ).first();
        }
        else {
            acct = acctEm.find([objid:bill.acctid]).first();
        }
        if(!acct) throw new Exception("Bill or account not found");
        if( acct.state != "ACTIVE" ) throw new Exception("Account is not yet active");
        if(!acct.billid) throw new Exception("Account does not yet have an active bill");

        //replace bill with the active bill
        bill = vwBillEm.find( [objid: acct.billid] ).first();
        if(bill.state != "POSTED") throw new Exception("Bill is not yet posted. Please contact admin");

        //update bill if transaction date is not yet updated. If bill is expired. Must create a new bill.
        return bill;    
    }

    def getBillingItems( def o ) {
        def bill = findBill( o );

        def param = [ acctid : bill.acctid, billid: bill.objid, include_items:true ];
        if( o.amtpaid ) param.amtpaid = o.amtpaid;
        def res = pmtSvc.getBillPaymentItems( param );
        if(!res.billitems) 
            throw new Exception("There are no current bills to pay. Consider deposit instead");
        res.billid = bill.objid;  
        res.acctid = bill.acctid;  
        res.year = bill.year;
        res.month = bill.month;
        return res;    
    }

    def getDepositItems( def o ) {
        def bill = findBill( o );

        //check first if there are pending balances before testing deposit. there must be no unpaid

        def param = [ acctid : bill.acctid, billid: bill.objid, include_items:true, amtpaid: o.amtpaid ];
        def res = pmtSvc.getBillPaymentItems( param );
        if(!res.billitems )
            throw new Exception("There are no items for this receipt. Please check rules");
        res.billid = bill.objid;     
        res.acctid = bill.acctid;   
        res.year = bill.year;
        res.month = bill.month;
        return res;    
    }

	@ProxyMethod 
	public def getBilling( o ) {
        def param = o.params;

        def txntype = param.txntype;
        def txndate = param.billdate;
        if(!txndate) txndate = dateSvc.getBasicServerDate();

        def pp = [:];
        pp.id = param.id;
        if( param.amtpaid ) pp.amtpaid = param.amtpaid;
        if( param.payoption ) pp.payoption = param.payoption;

        def res = null;        
        if( txntype == "billing" ) {
            res = getBillingItems( pp ); 
        }
        else if(txntype == "deposit") {
            res = getDepositItems( pp );             
        }
        else {
            throw new Exception("There are no current routine for " + txntype );
        }

        def rct = [:];
        rct.payer = res.owner;
        rct.paidby = res.acctname + " (" + res.acctno + ")";
        rct.paidbyaddress = res.address?.text;
        rct.acctno = res.acctno;
        rct.acctid = res.acctid;
        rct.billid = res.billid;
        rct.items = res.items;
        rct.billitems = res.billitems;
        rct.pmttxntype = txntype;
        rct.year = res.year;
        rct.month = res.month;
        return rct;
	}



}