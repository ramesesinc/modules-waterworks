import com.rameses.annotations.*;

class WaterworksAccountPersistenceInterceptor{
	
	@Service("SequenceService")
	def seqSvc;

	@Service("DateService")
	def dateSvc;

	@DataContext('waterworks_meter') 
	def wmeter;

	@DataContext('waterworks_credit') 
	def creditEm;

	@Before(pattern="PersistenceService.create", eval="#{args[0]._schemaname == 'waterworks_account'}")
	public void beforeCreate(def evt) {
		def o  = evt.args[0];
		o.classificationid = o.classification.objid;
        if( !o.acctno ) {
        	def prefix = "WACC" + dateSvc.getServerYear();
        	o.acctno = prefix  + seqSvc.getNextFormattedSeriesA( prefix, 5 );
        }    
        o.state = 'DRAFT';
	}

	@Before(pattern="PersistenceService.update", eval="#{args[0]._schemaname == 'waterworks_account' && args[0].action == null }")
	public void beforeUpdate(def evt) {
		def o = evt.args[0];
		if( o.meter?.objid == null ) {
			o.meterid = null;
		}
		else {
			o.meterid = o.meter.objid;
		}	
	}

	@After(pattern="PersistenceService.(create|update)", eval="#{args[0]._schemaname == 'waterworks_account' && args[0].action == null }")
	public void afterSave(def evt) {
		def o = evt.args[0];
		def meters = wmeter.find([currentacctid:o.objid]).list();
		meters.each {
			wmeter.find( [objid: it.objid ] ).update( [currentacctid: '{NULL}'] );
		}
		if(o.meter?.objid ) {
			def u = [:];
			u.currentacctid = o.objid;
			u.state = o.meter.state;
			wmeter.find( [objid: o.meterid ] ).update( u ); 
		}
	}

	@After(pattern="PersistenceService.read", eval="#{args[0]._schemaname == 'waterworks_account'}")
	public void afterRead(def evt) {
		def o = evt.result;
		def amt = creditEm.find( [acctid: o.objid ]).select("amount:{SUM(dr-cr)}").val();
		o.totalcredits = 0;
		if(amt!=null)	o.totalcredits = amt;
	}


}