
import com.rameses.annotations.*;

class WaterworksSubareaPersistenceInterceptor {

	@DataContext( "vw_waterworks_consumption" )
	def consumptionEm;
	
	@DataContext( "waterworks_batch_billing" )
	def batchBillEm;


    @Before(pattern="PersistenceService.(create|update)",  eval="#{ args[0]._schemaname == 'waterworks_subarea' }" )
	public void beforeSaveSubArea( evt ) {
		def o = evt.args[0];

		//check that there are no waterworks consumption month year greater than subarea
		if(o.nextperiod?.year ) {
			def p = [yearmonth: (o.nextperiod.year*12)+o.nextperiod.month  ];
			def t = consumptionEm.find( [subareaid: o.objid ]  ).where( "((year*12)+month)  >=  :yearmonth", p ).orderBy("year DESC, month DESC").first();
			if(t) {
				throw new Exception("Invalid year and month. The latest consumption entry for this subarea is year:" + t.year + " month:"+t.monthname);
			}
		}

	} 
 
}