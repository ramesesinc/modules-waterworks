import com.rameses.annotations.*;
import java.rmi.server.*;

class WaterworksBillPersistenceInterceptor{
	
    @Service("ControlnoGeneratorService")
    def controlNoSvc;

   	@Service('Var')
	def var;	

	@Service("DateService")
	def dateSvc;

	@Service("WaterworksScheduleService")
	def skedSvc;

	@Service("WaterworksBillService")
	def billSvc;

	@DataContext("waterworks_account")
	def acctEm;

	@DataContext("vw_waterworks_account")
	def vwAcctEm;

	@Before(pattern="PersistenceService.create", eval="#{args[0]._schemaname == 'waterworks_bill'}")
	public void beforeCreate(def evt) {
		def o  = evt.args[0];
		if(!o.acctid) throw new Exception("acctid is required");
		if(!o.txnmode) o.txnmode = 'CAPTURE';

		def acct = vwAcctEm.find( [objid: o.acctid ] ).first();

		//check first the bill year and month should not be greater than the group billing period for CAPTURE
		if(o.txnmode == "CAPTURE") {
			if( !acct.subarea.period?.year ) throw new Exception("Please assign first billing period in subarea");
			def ym1 = (acct.subarea.period.year *12 ) + acct.subarea.period.month;
			def ym2 = (o.year*12)+o.month;
			if(ym2 > ym1) throw new Exception("Bill year and month must not be greater than the subarea billing period");
		}
		else {
			if( !o.year ) throw new Exception("Year is required");
			if( !o.month ) throw new Exception("Month is required");			
		}

		if(!o.billno) o.billno = o.billrefno;
		if(!o.billno) {
			def pattern = var.waterworks_billno_format;
			if(!pattern) throw new Exception("Please specify waterworks_billno_format in sys_var");
			o.billno = controlNoSvc.getNextNo(pattern);
		};

		o.acctinfoid = acct.acctinfoid;
		o.period = skedSvc.getSchedule( [scheduleid: acct.subarea.schedulegroupid, year: o.year, month: o.month ]  );
		o.periodid = o.period.objid;
		o.billed = 0;
		o.printed = 0;
		o.billdate = o.period.billdate;
		o.expirydate = o.period.billexpirydate;
		if(o.txnmode == "CAPTURE") {
			o.state = "DRAFT";
			o.step = 1;
		}
		else {
			o.state = "POSTED";
			o.step = 5;
		}	
		o.totalcredits = 0;
		o.totalprevunpaid = 0;
		o.totalbillunpaid = 0;
		o.billamount = 0;
		o.totalsurcharge = 0;
		o.totalpayment = 0;
		o.totaldiscount = 0;
	}

	@After(pattern="PersistenceService.create", eval="#{args[0]._schemaname == 'waterworks_bill'}")
	public void afterCreate(def evt) {
		def o  = evt.args[0];
		def result = evt.result;
		//before replacing the old bill, call bill service initnew bill to initiate the totals
		if( result.txnmode == "ONLINE" ) {
			//calculate balance forward and bill		
			billSvc.initNewBill( [bill: result] );
		}
		acctEm.find( [objid: result.acctid ] ).update([ billid: result.objid ]);
	}


}