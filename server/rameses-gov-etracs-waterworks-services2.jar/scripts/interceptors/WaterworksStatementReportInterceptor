import com.rameses.annotations.*;
import treasury.facts.*;
import java.text.*;

class WaterworksStatementReportInterceptor {
	
	@Service("WaterworksScheduleService")
	def skedSvc;

	@DataContext("vw_waterworks_billing")
	def billingEm;

	@DataContext("waterworks_payment")
	def pmtEm;


	@After(pattern="FormReportService.getData", eval="#{ args[0].reportid == 'waterworks_statement' }")
	public void getStatementReport( def evt ) {
		def t = evt.args[0];
		def result = evt.result;

		def bill = billingEm.find( [objid: t.txnid ] ).first();
		if(!bill) throw new Exception("bill not found");
		int ym = (bill.year*12)+bill.month-1;
		int py = (int)(ym/12);
		int pm = (int)(ym % 12);
		if( pm == 0 ) {
			pm = 12;
			py = py - 1; 
		}

		def prevSked =  skedSvc.getSchedule( [scheduleid: bill.subarea.schedulegroupid, year: py, month: pm ] );

		bill.details = [];

		if( bill.arrears ) bill.details << [txndate:prevSked.fromperiod, particulars: "PREVIOUS BALANCE", dr: bill.arrears, cr:0, group: "PREVIOUS" ];		
		if( bill.credits ) bill.details << [txndate:prevSked.fromperiod, particulars: "CREDITS FROM ADV.PAYMENT", dr:0, cr: bill.credits, group: "PREVIOUS"];	
		if( bill.otherfees ) bill.details << [txndate:prevSked.fromperiod, particulars: "OTHER CHARGES", dr: bill.otherfees, cr:0, group:  "PREVIOUS"];		
		if( bill.surcharge ) bill.details << [txndate:prevSked.duedate, particulars: "SURCHARGE", dr: bill.surcharge, cr:0, group: "PREVIOUS"];
		if( bill.interest ) bill.details << [txndate:prevSked.duedate, particulars: "INTEREST", dr: bill.interest, cr:0, group: "PREVIOUS"];
		if( bill.amount ) bill.details << [txndate: bill.fromperiod, particulars: "CURRENT BALANCE", dr: bill.amount, cr:0, group: "CURRENT"];		

		//we also get the payment
		def pmts = pmtEm.find( [acctid: bill.acctid, year: bill.year, month:bill.month] ).orderBy("refdate").list();
		pmts.each {
			def pmt = [:];
			pmt.txndate = it.refdate;
			pmt.particulars = "Payment Ref No " + it.refno;
			pmt.dr = 0;
			if( it.discount > 0 ) pmt.dr = (it.discount * -1);
			pmt.cr = it.amount;
			bill.details << pmt;
		}

		//calc the run balance:
		def runbal = 0;
		bill.details.each {
			runbal = runbal + it.dr - it.cr;
			it.runbalance = runbal;
		}

		bill.barcode = bill.billno;
		bill.amount = runbal;
		result.data = bill;
	}

} 
