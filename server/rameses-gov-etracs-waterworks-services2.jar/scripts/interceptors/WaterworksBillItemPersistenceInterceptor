import com.rameses.annotations.*;
import java.rmi.server.UID;

class WaterworksBillItemPersistenceInterceptor{
	
	@DataContext("waterworks_billitem")
	def billItemEm; 

	@DataContext("waterworks_account")
	def acctEm; 

	@DataContext("waterworks_recurringfee")
	def recurFeeEm; 

	@DataContext("waterworks_payment_item")
	def pmtItemEm; 


	@After(pattern="PersistenceService.(create|update)", eval="#{args[0]._schemaname == 'waterworks_billitem'}")
	public void afterCreateAndUpdate( evt ) {
		def result = evt.result;	
		billItemEm.updateInitialBillBalanceForward([acctid: result.acctid]);
	} 

	@Before(pattern="PersistenceService.removeEntity", eval="#{args[0]._schemaname == 'waterworks_billitem'}")
	public void beforeRemove( evt ) {
		def o = evt.args[0];	
		def e = billItemEm.find( [objid: o.objid] ).first(); 
		if( e.billed > 0  ) 
			throw new Exception( "This entry cannot be removed. It is already billed");

		//if there is activebill, it means removing the item is done inside a bill which is always allowed
		//so if there is no active bill we have to make sure there is no current bill in account

		if( !o.activebillid ) {
			if( acctEm.find( [objid: e.acctid ] ).select("billid").val() != null ) 
				throw new Exception("There is already an active bill. This item cannot be removed. Remove it from the bill");
		}

		def b = pmtItemEm.find([refid: o.objid]).exists();
		if( b == true ) {
			throw new Exception("Cannot delete item becuase it already has payment reference");
		}

		if( e.amtpaid > 0 ) throw new Exception("Cannot delete an item that has amtpaid");

		//if there is recurring fee, let it ride in the parameters so it can be evaluated efficiently	
		if( e.recurringfeeid ) o.recurid = e.recurringfeeid;	
		o.acctid = e.acctid;
	} 

	@After(pattern="PersistenceService.removeEntity", eval="#{args[0]._schemaname == 'waterworks_billitem' }")
	public void afterRemove( evt ) {
		def o = evt.args[0];	
		if(o.recurid !=null) {
			recurFeeEm.updateAmtBilledByBillItem( [billitemid: o.objid, recurringfeeid: o.recurid ] );		
		}
		if( o.acctid ) {
			billItemEm.updateInitialBillBalanceForward([acctid: o.acctid]);
		}
	} 



}