import com.rameses.annotations.*;

import com.rameses.rules.common.*;
import waterworks.facts.*;
import treasury.facts.*;
import treasury.actions.*;

class WaterworksComputationService  {
	
	@Service("RuleExecutorService")
	def ruleSvc;

	@DataContext("waterworks_consumption")
	def consEm;

	@DataContext("vw_waterworks_account")
	def acctEm;

	@DataContext("waterworks_meter")
	def meterEm;

	/*************************************************************************************
	* Check first if there is meter, then compute volume = current reading - prev reading
	**************************************************************************************/
	@ProxyMethod
	public def compute( def o ) {
		//open the account and meter
		if(!o.acctid) throw new Exception("acctid is required in WaterworksComputationService");

		//add account fact
		def acct = acctEm.find( [objid: o.acctid] ).first(1); 

		def facts = [];
		facts << new WaterAccount( acct );
		if( acct.attributes ) {
			acct.attributes.each {
				facts << new WaterworksAttribute(name:it);
			}
		}

		def meter = acct.meter;
		def meterstate = o.meterstate;
		if(!meterstate) meterstate = acct.meterstate;

		//if no meter then do not compute volume based on reading
		if( meter ) {
			meter.state = meterstate;
			
			if(o.prevreading == null) throw new Exception("prevreading is required in WaterworksComputationService");
			if(o.reading==null) throw new Exception("reading is required in WaterworksComputationService");

			if( o.prevreading >= meter.capacity ) {
                throw new Exception("Prev reading must be less than meter capacity");
            }
            if( o.reading >= meter.capacity ) {
                throw new Exception("Reading must be less than meter capacity");
            }
            //calculate volume if volume is not equal to zero or force compute volume if meter is active 
            if( meterstate == 'ACTIVE' ) {
                if( o.reading < o.prevreading ) {
                    o.volume = (meter.capacity + o.reading) - o.prevreading; 
                }
                else {
                    o.volume = o.reading - o.prevreading;
                }
            }
			facts << new WaterMeter( meter );            
        }

        def wc = new WaterConsumption( o );
		facts << wc;
		ruleSvc.execute( "waterworkscomputation", facts, null, null );

		def res = [:];
		res.amount = wc.amount;
		res.volume = wc.volume;

		return res;
	}

}