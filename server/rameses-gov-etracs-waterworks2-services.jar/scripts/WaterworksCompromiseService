import com.rameses.annotations.*;

import com.rameses.rules.common.*;
import waterworks.facts.*;
import treasury.facts.*;
import treasury.actions.*;

class WaterworksCompromiseService  {
	
	@DataContext("waterworks_compromise")
	def compEm;

	@DataContext("waterworks_compromise_fee")
	def compFeeEm;

	@Service("NumberService")
	def numSvc;

	@Service("BillingRuleService")
	def ruleSvc;

	@ProxyMethod
	public def buildInstallment( def o ) {
		def comp = compEm.find( [objid: o.objid ]).first();
		def bal = comp.amount - comp.downpayment;

		def facts = [];
		facts << new WaterCompromise( comp );

		def installAmt = numSvc.round((bal / comp.term));
		def amt = bal;
		(i..term).each {
			amt = amt - installAmt;
			def m = [:];
			m.
			if(amt % installAmt == 0 ) {
				m.amount = amt;
			} 
			else {
				m.amount = installAmt;
			}
		}

	}

}