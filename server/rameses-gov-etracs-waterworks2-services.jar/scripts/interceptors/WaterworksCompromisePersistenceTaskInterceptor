import com.rameses.annotations.*;
import treasury.facts.*;

class WaterworksCompromisePersistenceTaskInterceptor {
	
	@Service("DateService")
	def dateSvc;

	@Service("WorkflowTaskService")
	def taskSvc;

	@Service("ControlnoGeneratorService")
    def controlNoSvc;

	@Service("Var")
	def var;

	@DataContext("waterworks_account")
	def acctEm;

	@DataContext("waterworks_compromise")
	def compromiseEm;

	@DataContext("waterworks_compromise_task")
	def compromiseTaskEm;

	@DataContext("waterworks_compromise_billitem")
	def compromiseBillitemEm;
	
	@Before(pattern="PersistenceService.create", eval="#{ args[0]._schemaname == 'waterworks_compromise'}")
	void beforeCreateCompromise( evt ) {
		def p = evt.args[0]; 
		def pattern = var.waterworks_compromise_controlno_format;
		if(!pattern) throw new Exception("Please specify waterworks_compromise_controlno_format in sys_var");
		p.controlno = controlNoSvc.getNextNo(pattern);
	}

	@After(pattern="PersistenceService.create", eval="#{ args[0]._schemaname == 'waterworks_compromise'}")
	void afterCreateCompromise( evt ) {
		def p = evt.args[0];
		def result = evt.result; 

		//save the billitems first
		p.billitems.each { bi->
			bi.amtpaid = 0;
			bi.parentid = result.objid;
			compromiseBillitemEm.create( bi );
		}
		def cnt = compromiseBillitemEm.find([parentid: result.objid]).select("c:{COUNT(*)}").val();
		//start the workflow
		def wf = [:];
		wf.processname = 'waterworks_compromise';
		wf.refid = result.objid;
		wf.startdate = dateSvc.serverDate;
		taskSvc.start( wf );

	}

	@Before(pattern="PersistenceService.removeEntity", eval="#{ args[0]._schemaname == 'waterworks_compromise'}")
	void beforeRemoveCompromise( evt ) {
		def o = evt.args[0];
		def comp = compromiseEm.find([objid: o.objid]).first();
		if( comp.task.state !='draft')
			throw new Exception("Application can only be deleted on the draft state");
		compromiseBillitemEm.find( [parentid: o.objid]).delete();	
		compromiseEm.find([objid: o.objid]).update([taskid: "{NULL}", acctinfoid:"{NULL}"]);
		compromiseTaskEm.find([refid: app.objid]).delete();
	}


} 
