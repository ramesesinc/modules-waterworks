import com.rameses.annotations.*;
import treasury.facts.*;

class WaterworksBatchBillingTaskInterceptor {
	
	@Service("DateService")
	def dateSvc;

	@DataContext("waterworks_subarea")
	def subareaEm;

	@DataContext("waterworks_batch_billing")
	def batchEm;

	@DataContext("waterworks_batch_billing_task")
	def taskEm;

	@DataContext("waterworks_bill")
	def billEm;

	@DataContext("vw_waterworks_bill")
	def vwBillEm;

	@Service("WaterworksScheduleService")
	def skedSvc;

	@DataContext("waterworks_batch_billing_error")
	def errorEm;

	@Before(pattern="WorkflowTaskService.signal", eval="#{ args[0].processname == 'waterworks_batch_billing' && args[0].action == 'submit-for-reading'  }")
	public void checkErrorsBeforeProcess( evt ) {
		def p = evt.args[0]; 
		def cnt = errorEm.find( [batchid: p.refid] ).select("c:{COUNT(*)}").val();	
		if(cnt!=null && cnt > 0 ) 
			throw new Exception("Please resolve the batch errors first before proceeding");
	}

	@Before(pattern="WorkflowTaskService.signal", eval="#{ args[0].processname == 'waterworks_batch_billing' && args[0].action == 'submit-for-approval'  }")
	public void checkErrorsBeforeApproval( evt ) {
		def p = evt.args[0]; 
		def batch = batchEm.find([objid: p.refid]).first();			

		def errs = vwBillEm.find( [batchid: p.refid ]).select("c:{COUNT(*)}").where( "meterstate='ACTIVE' AND consumption.hold=0 AND consumption.volume=0" ).val();
		if( errs!=null && errs > 0 ) 
			throw new Exception("All accounts with active meters that are not on hold must have a volume consumption");

	}

	@Before(pattern="WorkflowTaskService.signal", eval="#{ args[0].processname == 'waterworks_batch_billing' && args[0].action == 'close-batch'  }")
	public void validateBeforeClose( evt ) {
		def p = evt.args[0]; 
		def unprinted = billEm.find( [batchid: p.refid ]).select("c:{COUNT(*)}").where("printed=0").val();
		if( unprinted > 0 ) throw new Exception("This batch cannot be closed yet because there are unprinted bills");
	}

	@After(pattern="WorkflowTaskService.signal", eval="#{ args[0].processname == 'waterworks_batch_billing' && args[0].action == 'close-batch'  }")
	public void updateSubAreaToNextPeriod( evt ) {
		def p = evt.args[0]; 
		
		def batch = batchEm.find( [objid: p.refid ] ).first();
		int nyr = batch.period.year;
		int nmon = batch.period.month + 1;
		if( nmon > 12 ) {
			nmon = 1;
			nyr = nyr + 1;
		}
		def sa = subareaEm.find( [objid: batch.subareaid ] ).first();
		def nextPeriod = skedSvc.getSchedule([scheduleid: sa.schedulegroupid, year: nyr, month: nmon]);
		subareaEm.find( [objid: batch.subareaid ]).update( [periodid: nextPeriod.objid ] );
	}
	
} 
